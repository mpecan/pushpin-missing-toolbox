spring:
  application:
    name: pushpin-missing-toolbox

# Server configuration
server:
  port: 8080

# Discovery configuration
pushpin:
  discovery:
    enabled: true
    refreshInterval: PT30S
    
    # AWS Discovery configuration
    aws:
      enabled: false
      region: us-east-1
      tags:
        service: pushpin
      port: 7999
      controlPort: 5564
      publishPort: 5560
      healthCheckPath: /status
    
    # Kubernetes Discovery configuration
    kubernetes:
      enabled: false
      namespace: default
      labelSelector: app=pushpin
      refreshCacheSeconds: 30
      port: 7999
      controlPort: 5564
      publishPort: 5560
      healthCheckPath: /status
  
  # Pushpin server configuration
  servers:
    - id: pushpin-1
      host: pushpin-1
      port: 7999
      controlPort: 5564
      publishPort: 5560
      httpPort: 5561
      active: true
      weight: 100
      healthCheckPath: /api/health/check
    
    - id: pushpin-2
      host: pushpin-2
      port: 7999
      controlPort: 5564
      publishPort: 5560
      httpPort: 5561
      active: true
      weight: 100
      healthCheckPath: /api/health/check
  
  # Pushpin health check configuration
  healthCheckEnabled: true
  healthCheckInterval: 60000
  defaultTimeout: 5000
  
  # Pushpin authentication configuration
  authEnabled: false
  authSecret: changeme
  
  # Enhanced security configuration
  security:
    # JWT Authentication
    jwt:
      enabled: false
      # JWT provider: symmetric, keycloak, auth0, etc.
      provider: symmetric
      # Secret key (for symmetric provider only)
      secret: changemechangemechangemechangemechangemechangeme
      # JWKS URI for OAuth2 providers (required for keycloak, auth0, etc.)
      jwksUri: 
      issuer: pushpin-missing-toolbox
      audience: pushpin-client
      expirationMs: 3600000
      # OAuth2 client config (for token generation with external providers)
      clientId: 
      clientSecret: 
      # JWT claims configuration
      authoritiesClaim: roles
      authoritiesPrefix: ROLE_
      
      # Example configuration for Keycloak:
      # provider: keycloak
      # jwksUri: https://your-keycloak-server/auth/realms/your-realm/protocol/openid-connect/certs
      # issuer: https://your-keycloak-server/auth/realms/your-realm
      # clientId: your-client-id
      # clientSecret: your-client-secret
      
      # Example configuration for Auth0:
      # provider: auth0
      # jwksUri: https://your-auth0-tenant.auth0.com/.well-known/jwks.json
      # issuer: https://your-auth0-tenant.auth0.com/
      # audience: your-api-identifier
    
    # Rate limiting
    rateLimit:
      enabled: false
      capacity: 100
      refillTimeInMillis: 60000
    
    # Audit logging
    auditLogging:
      enabled: true
      level: INFO
    
    # HMAC request signing for server-to-server communication
    hmac:
      enabled: false
      algorithm: HmacSHA256
      secretKey: changeme
      headerName: X-Pushpin-Signature
    
    # Encryption for sensitive channel data
    encryption:
      enabled: false
      algorithm: AES/GCM/NoPadding
      secretKey: 
  
  # Transport configuration
  # Transport type: http or zmq (default: http)
  transport: http
  
  # Multi-server ZMQ configuration
  # Enable ZMQ for multi-server setups (disabled by default for backward compatibility)
  zmqEnabled: false
  # Test mode for development debugging
  testMode: false
  
  # ZMQ Transport configuration
  zmq:
      connectionPoolEnabled: true
      hwm: 1000
      linger: 0
      sendTimeout: 1000
      reconnectIvl: 100
      reconnectIvlMax: 0
      connectionPoolRefreshInterval: 60000

# Logging configuration
logging:
  level:
    io.github.mpecan.pmt: DEBUG
    org.zeromq: DEBUG

# Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true
  
  # Metrics configuration
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 50ms,100ms,200ms,400ms,800ms,1s,2s,5s
    tags:
      application: ${spring.application.name}
      environment: development

