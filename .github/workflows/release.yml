name: Release Deployment

on:
  release:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name }}
    
    - name: Cache Gradle Wrapper
      uses: actions/cache@v4
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-wrapper-

    - name: Cache Gradle Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle.kts', '**/*.gradle', 'gradle.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-caches-

    - name: Cache TestContainers Images
      uses: actions/cache@v4
      with:
        path: ~/.testcontainers
        key: ${{ runner.os }}-testcontainers-${{ hashFiles('**/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-testcontainers-

    - name: Cache Maven Local Repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
    
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Run tests
      run: ./gradlew test
    
    - name: Publish to Maven Central
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.GPG_KEY_ID }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_PASSPHRASE }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_PRIVATE_KEY }}
      run: ./gradlew publish --build-cache
    
    - name: Generate GitHub App token
      uses: actions/create-github-app-token@v1
      id: generate-token
      with:
        app-id: ${{ secrets.REPOSITORY_BUTLER_APP_ID }}
        private-key: ${{ secrets.REPOSITORY_BUTLER_PEM }}
    
    - name: Extract version
      id: extract-version
      run: |
        VERSION=$(grep "^version=" gradle.properties | cut -d'=' -f2)
        VERSION_WITHOUT_SNAPSHOT=${VERSION%-SNAPSHOT}
        echo "version=$VERSION_WITHOUT_SNAPSHOT" >> $GITHUB_OUTPUT
    
    - name: Update README.md
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        sed -i "s/implementation(\"io\.github\.mpecan:pushpin-[^:]*:[^\"]*\")/implementation(\"io.github.mpecan:pushpin-api:$VERSION\")/g" README.md
        sed -i "s/implementation(\"io\.github\.mpecan:pushpin-[^:]*:[^\"]*\")/implementation(\"io.github.mpecan:pushpin-client:$VERSION\")/g" README.md
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ steps.generate-token.outputs.token }}
        commit-message: "docs: update README.md with version ${{ steps.extract-version.outputs.version }}"
        title: "docs: update README.md with version ${{ steps.extract-version.outputs.version }}"
        body: |
          Updates README.md with the latest version ${{ steps.extract-version.outputs.version }}.
          
          This is an automated pull request created after a successful release.
        branch: docs/update-readme-${{ steps.extract-version.outputs.version }}

  build-docker:
    needs: [publish]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.tag_name }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max